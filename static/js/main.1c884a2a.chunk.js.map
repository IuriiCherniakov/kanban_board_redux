{"version":3,"sources":["AddModalTask.js","AddModalColumn.js","Tasks.js","Column.js","Board.js","App.js","Redux/reducer.js","Redux/store.js","index.js"],"names":["AddModalTask","props","addNewTask","statuses","useState","isModalTask","setIsModalTask","inputNewTitle","setInputNewTitle","inputNewTaskPriority","setInputNewTaskPriority","inputNewTaskStatus","setInputNewTaskStatus","Button","onClick","Modal","isOpen","ModalHeader","ModalBody","Label","Input","type","value","onChange","e","target","Row","Col","map","el","ModalFooter","console","log","AddModalColumn","inputNewColumnStatus","setInputNewColumnStatus","addNewCol","isModal","setIsModal","inputNewColumn","setInputNewColumn","Tasks","tasks","changeTaskPriority","deleteTask","changeTaskPriorityDown","editTaskName","i","editMode","setEditMode","name","editTask","setEditTask","Card","CardBody","id","priority","disabled","Column","column","deleteColumn","status","title","filter","sort","a","b","key","connect","state","list","columns","dispatch","newTaskName","newTaskPriority","newTaskStatus","payload","taskId","addNewColumn","newTitleColumn","newColumnStatus","columnId","taskPriority","taskIndexCurrent","taskIndexPrevious","listOfColumns","taskIndex","App","initialState","Math","random","kanbanControlPanel","action","newPriority","currTaskIndex","prevTaskIndex","newPriority1","currTaskIndex1","prevTaskIndex1","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c884a2a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\nimport {Button, Col, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row} from \"reactstrap\";\r\n\r\n\r\nfunction AddModalTask(props) {\r\n    const {addNewTask, statuses} = props;\r\n    const [isModalTask, setIsModalTask] = useState(false);\r\n    const [inputNewTitle, setInputNewTitle] = useState('')\r\n    const [inputNewTaskPriority, setInputNewTaskPriority] = useState(1)\r\n    const [inputNewTaskStatus, setInputNewTaskStatus] = useState('todo')\r\n    const addNewTaskButton = () =>{\r\n        addNewTask(inputNewTitle, inputNewTaskPriority, inputNewTaskStatus);\r\n        setIsModalTask(false);\r\n        setInputNewTitle('');\r\n        console.log(inputNewTitle);\r\n        console.log(inputNewTaskPriority);\r\n        console.log(inputNewTaskStatus);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <>\r\n                <Button onClick={() => setIsModalTask(true)}>Add new task</Button>\r\n                <Modal isOpen={isModalTask}>\r\n\r\n                    <ModalHeader>Add new task</ModalHeader>\r\n                    <ModalBody>\r\n                        <Label>New title</Label>\r\n                        <Input type='text' value={inputNewTitle} onChange={(e)=>{setInputNewTitle(e.target.value)}}/>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <Label> priority</Label>\r\n                                <Input type='select' value={inputNewTaskPriority} onChange={(e)=> {setInputNewTaskPriority(e.target.value)}}>\r\n                                    <option value={1}>low</option>\r\n                                    <option value={2}>medium</option>\r\n                                    <option value={3}>high</option>\r\n                                    <option value={4}>super high</option>\r\n                                </Input>\r\n                            </Col>\r\n\r\n                            <Col>\r\n\r\n                                <Label>status</Label>\r\n                                <Input type='select' value={inputNewTaskStatus} onChange={(e)=> {setInputNewTaskStatus(e.target.value)}}>\r\n                                    {statuses.map(el=> <option value={el}>{el}</option> )}\r\n\r\n                                    {/*<option value=\"progress\">progress</option>*/}\r\n                                    {/*<option value=\"review\">review</option>*/}\r\n                                    {/*<option value=\"done\">done</option>*/}\r\n\r\n                                </Input>\r\n\r\n                            </Col>\r\n\r\n\r\n\r\n\r\n                        </Row>\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={addNewTaskButton} >Add new task!!</Button>\r\n                        {' '}\r\n                        <Button onClick={()=>{setIsModalTask(false)}} >Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddModalTask;\r\n","import React, {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport {Button, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport AddModalTask from \"./AddModalTask\";\r\n\r\n\r\nfunction AddModalColumn(props) {\r\n   const columnStatuses = [\r\n       'todo', 'progress', 'review', 'done'\r\n   ]\r\n    const [inputNewColumnStatus, setInputNewColumnStatus] = useState('todo');\r\n    console.log(columnStatuses)\r\n    const {addNewCol} = props;\r\n    const [isModal, setIsModal] = useState(false)\r\n    const [inputNewColumn, setInputNewColumn] = useState('')\r\n    // ()=>addNewCol(inputNewColumn)\r\n\r\n    const addNewColumnButton = () => {\r\n        addNewCol(inputNewColumn,inputNewColumnStatus);\r\n        setInputNewColumn('')\r\n        setIsModal(false)\r\n\r\n    }\r\n\r\n    console.log(inputNewColumn)\r\n    return (\r\n        <div>\r\n\r\n            <>\r\n                <Button onClick={() => {\r\n                    setIsModal(true)\r\n                }}>ADD NEW Column</Button>\r\n                <Modal isOpen={isModal}>\r\n                    <ModalHeader>Add new column!!!</ModalHeader>\r\n                    <ModalBody>\r\n                        <Label>New title</Label>\r\n                        <Input type='text' onChange={(e) => {\r\n                            setInputNewColumn(e.target.value)\r\n                        }}/>\r\n\r\n                        <Label>Status</Label>\r\n                    {/*    <Input type='select' value={inputNewColumnStatus}  onChange={(e) => {*/}\r\n                    {/*        setInputNewColumnStatus(e.target.value)}}>*/}\r\n                    {/*        <option value={'todo'}>Todo</option>*/}\r\n                    {/*        <option value={'progress'}>progress</option>*/}\r\n                    {/*        <option value={'review'}>review</option>*/}\r\n                    {/*        <option value={'done'}>done</option>*/}\r\n                    {/*</Input>*/}\r\n                    <Input  value={inputNewColumnStatus}  onChange={(e)=> {setInputNewColumnStatus(e.target.value)}}  />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={addNewColumnButton}>Add new Column</Button>\r\n                        {' '}\r\n                        <Button onClick={() => {\r\n                            setIsModal(false)\r\n                        }}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddModalColumn;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Button, Card, CardBody, Input} from \"reactstrap\";\r\n\r\n\r\nfunction Tasks(props) {\r\n    const {tasks, changeTaskPriority, deleteTask, changeTaskPriorityDown, editTaskName, i} = props;\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [editTask, setEditTask] = useState(tasks.name)\r\n\r\n    const deleteButtonHandler = () => {\r\n        deleteTask(tasks.id)\r\n    }\r\n\r\n    const saveButton = () => {\r\n        //\r\n        // editTaskName(tasks.id, editTask)\r\n        setEditMode(false)\r\n    }\r\n\r\n    console.log('PROPS')\r\n    console.log(props)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n\r\n                    {editMode ?\r\n                        <div>\r\n                            <Input value={editTask} onChange={(e) => setEditTask(e.target.value)}/>\r\n                            <Button onClick={saveButton}>Save</Button>\r\n                        </div>\r\n                        :\r\n                        <h3> {tasks.name} </h3>\r\n\r\n                    }\r\n\r\n\r\n                    <Button onClick={() => setEditMode(true)}>Edit</Button>\r\n                    <Button onClick={deleteButtonHandler}> Del </Button>\r\n\r\n\r\n                    <div>\r\n                        priority: {tasks.priority}\r\n\r\n                    </div>\r\n                    <Button disabled={tasks.priority === 4}\r\n                            onClick={() => changeTaskPriority(tasks.id, tasks.priority, tasks.i, tasks.i - 1)}>🠅</Button>\r\n                    <Button disabled={tasks.priority === 1}\r\n                            onClick={() => changeTaskPriorityDown(tasks.id, tasks.priority, tasks.i, tasks.i + 1)}\r\n                    >🠇</Button>\r\n\r\n                    <Button>←</Button>\r\n                    <Button>→</Button>\r\n\r\n\r\n                </CardBody>\r\n\r\n\r\n            </Card>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tasks;\r\n","import React, {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport {Button, Col} from \"reactstrap\";\r\nimport Tasks from \"./Tasks\";\r\n\r\n\r\nfunction Column(props) {\r\n    const {tasks, column, deleteColumn, changeTaskPriority, deleteTask, changeTaskPriorityDown, editTaskName} = props;\r\n    console.log(\"status column\", column.status)\r\n\r\n    return (\r\n        <Col>\r\n            <h2>{column.title}</h2>\r\n\r\n\r\n            <Button onClick={() => deleteColumn(column.id)}>Delete column</Button>\r\n\r\n            {tasks.filter(el => column.status === el.status)\r\n                .sort((a,b)=>b.priority - a.priority).map((el, i) =>\r\n                    <Tasks\r\n\r\n                        tasks={el}\r\n                        key={el.id}\r\n                        changeTaskPriority={changeTaskPriority}\r\n                        deleteTask={deleteTask}\r\n                        i={i}\r\n                        changeTaskPriorityDown={changeTaskPriorityDown}\r\n                        editTaskName={editTaskName}\r\n                    />\r\n                )\r\n\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Column;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\nimport AddModalColumn from \"./AddModalColumn\";\r\nimport Column from \"./Column\";\r\nimport {Row} from \"reactstrap\";\r\nimport AddModalTask from \"./AddModalTask\";\r\n\r\nfunction Board(props) {\r\n\r\n\r\n    const listOfColumns = props.columns\r\n    const statuses = listOfColumns.map(el => el.status)\r\n    console.log('statuses', statuses)\r\n    const addNewTask = (newTaskName, newTaskPriority, newTaskStatus, taskIndex) => {\r\n        props.addNewTask(newTaskName, newTaskPriority, newTaskStatus, taskIndex)\r\n    }\r\n\r\n    const addNewCol = (newTitleColumn, newColumnStatus) => {\r\n        props.addNewColumn(newTitleColumn, newColumnStatus)\r\n    }\r\n\r\n    const deleteColumn = (columnId) => {\r\n        props.deleteColumn(columnId)\r\n    }\r\n\r\n    const deleteTask = (taskId) => {\r\n        props.deleteTask(taskId)\r\n    }\r\n\r\n    const changeTaskPriority = (taskId,taskPriority,taskIndexCurrent,taskIndexPrevious) => {\r\n        props.changeTaskPriority(taskId,taskPriority,taskIndexCurrent,taskIndexPrevious)\r\n    }\r\n\r\n    const changeTaskPriorityDown = (taskId,taskPriority,taskIndexCurrent,taskIndexPrevious) => {\r\n        props.changeTaskPriorityDown(taskId,taskPriority,taskIndexCurrent,taskIndexPrevious);\r\n    }\r\n\r\n    const editTaskName = (taskId, newTaskName)=> {\r\n        props.editTask(taskId, newTaskName)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <AddModalColumn\r\n                addNewCol={addNewCol}\r\n\r\n            />\r\n\r\n            <AddModalTask\r\n                addNewTask={addNewTask}\r\n                statuses={statuses}\r\n\r\n\r\n            />\r\n\r\n\r\n            <Row>\r\n                {listOfColumns.map(\r\n                    el =>\r\n                        <Column\r\n                            key={el.id}\r\n                            column={el}\r\n                            tasks={props.tasks}\r\n                            deleteColumn={deleteColumn}\r\n                            changeTaskPriority={changeTaskPriority}\r\n                            deleteTask={deleteTask}\r\n                            changeTaskPriorityDown={changeTaskPriorityDown}\r\n                            editTaskName={editTaskName}\r\n                        />\r\n                )\r\n                }\r\n            </Row>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tasks: state.list,\r\n    columns: state.columns\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addNewTask: (newTaskName, newTaskPriority, newTaskStatus) => dispatch({\r\n        type: 'ADD_NEW_TASK',\r\n        payload: {newTaskName, newTaskPriority, newTaskStatus}\r\n    }),\r\n    deleteTask: (taskId) => dispatch({type: 'DELETE_TASK', payload: taskId}),\r\n    addNewColumn: (newTitleColumn, newColumnStatus) => dispatch({\r\n        type: 'ADD_NEW_COLUMN',\r\n        payload: {newTitleColumn, newColumnStatus}\r\n    }),\r\n    deleteColumn: (columnId) => dispatch({type: 'COLUMN_DELETE', payload: columnId}),\r\n    changeTaskPriority: (taskId,taskPriority,taskIndexCurrent,taskIndexPrevious) => dispatch({\r\n        type: 'CHANGE_TASK_PRIORITY_UP',\r\n        payload: {taskId,taskPriority,taskIndexCurrent,taskIndexPrevious }\r\n    }),\r\n\r\n    changeTaskPriorityDown: (taskId,taskPriority,taskIndexCurrent,taskIndexPrevious) => dispatch({\r\n        type: 'CHANGE_TASK_PRIORITY_DOWN',\r\n        payload: {taskId,taskPriority,taskIndexCurrent,taskIndexPrevious }\r\n    }),\r\n\r\n    editTask: (taskId, newTaskName) => dispatch({\r\n        type: 'EDIT_TASK',\r\n        payload: {taskId,newTaskName}\r\n    })\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n","import React from 'react';\n\nimport './App.css';\nimport Board from \"./Board\";\nimport AddModalTask from \"./AddModalTask\";\n\nfunction App() {\n    return (\n        <div>\n            <Board/>\n\n        </div>\n    );\n}\n\nexport default App;\n","const initialState = {\r\n    list: [\r\n        {id: Math.random(), status: 'todo', priority: 1, name: 'Text 1'},\r\n        {id: Math.random(), status: 'progress', priority: 2, name: 'Text 2'},\r\n        {id: Math.random(), status: 'done', priority: 3, name: 'Text 3'},\r\n        {id: Math.random(), status: 'done', priority: 4, name: 'Text 4'},\r\n\r\n    ],\r\n    columns: [\r\n        {id: Math.random(), status: 'todo', priority: 1, title: 'To do'},\r\n        {id: Math.random(), status: 'progress', priority: 2, title: 'In progress'},\r\n        {id: Math.random(), status: 'review', priority: 3, title: 'Need to review '},\r\n        {id: Math.random(), status: 'done', priority: 4, title: 'Done'},\r\n\r\n    ],\r\n\r\n};\r\nconst kanbanControlPanel = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD_NEW_TASK':\r\n            return {\r\n                ...state,\r\n                list: [...state.list, {\r\n                    id: Math.random(),\r\n                    status: action.payload.newTaskStatus,\r\n                    priority: action.payload.newTaskPriority,\r\n                    name: action.payload.newTaskName\r\n                }]\r\n            }\r\n\r\n        // case 'TASK_DELETE':\r\n        //     const newState = {...state, list: state.list.filter(el => el.id !== action.payload)}\r\n        //     return newState\r\n\r\n        case 'ADD_NEW_COLUMN':\r\n            return {\r\n                ...state,\r\n                columns: [\r\n                    ...state.columns, {\r\n                        id: Math.random(),\r\n                        status: action.payload.newColumnStatus,\r\n                        priority: 4,\r\n                        title: action.payload.newTitleColumn\r\n                    }\r\n                ]\r\n\r\n            }\r\n\r\n        case 'COLUMN_DELETE':\r\n            return {\r\n                ...state, columns: state.columns.filter(el => el.id !== action.payload)\r\n            }\r\n\r\n        case 'CHANGE_TASK_PRIORITY_UP':\r\n            const newPriority = action.payload.taskPriority + 1;\r\n            let currTaskIndex = action.payload.taskIndexCurrent;\r\n            let prevTaskIndex = action.payload.taskIndexPrevious;\r\n            return {\r\n                ...state, list: state.list.map((el, i) => {\r\n\r\n                    if (el.id === action.payload.taskId) return ({...el, priority: newPriority, i: currTaskIndex + 1})\r\n                    if (i === currTaskIndex) return state.list[prevTaskIndex]\r\n                    if (i === prevTaskIndex) return state.list[currTaskIndex]\r\n                    return el\r\n                })\r\n            }\r\n\r\n        case 'CHANGE_TASK_PRIORITY_DOWN':\r\n            const newPriority1 = action.payload.taskPriority - 1;\r\n            let currTaskIndex1 = action.payload.taskIndexCurrent;\r\n            let prevTaskIndex1 = action.payload.taskIndexPrevious;\r\n            return {\r\n                ...state, list: state.list.map((el, i) => {\r\n\r\n                    if (el.id === action.payload.taskId) return ({...el, priority: newPriority1, i: currTaskIndex1 - 1})\r\n                    if (i === currTaskIndex1) return state.list[prevTaskIndex1]\r\n                    if (i === prevTaskIndex1) return state.list[currTaskIndex1]\r\n                    return el\r\n                })\r\n            }\r\n\r\n\r\n        case 'DELETE_TASK':\r\n\r\n            return {\r\n\r\n                ...state, list: state.list.filter(el => el.id !== action.payload)\r\n            }\r\n\r\n        case 'EDIT_TASK':\r\n\r\n            return {\r\n                ...state,\r\n                list: state.list.map(el => {\r\n                        if (el.id === action.payload.taskId) return ({...el, name: action.payload.newTaskName})\r\n                    }\r\n                )\r\n\r\n\r\n            }\r\n\r\n        // case 'EDIT_TODO':\r\n        // //\r\n        // //     return {\r\n        // //         ...state,\r\n        // //         todos: state.todos.map(el => {\r\n        // //             if (el.id === action.payload.todoId) return ({...el, title: action.payload.newTitle})\r\n        // //             return el\r\n        // //         })\r\n        // //     };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// console.log(newPriority)\r\n// return {\r\n//     state.list.map((el, i) => {\r\n// todos: [...state.todos, {title: action.payload, done: false, id: Math.random()}]\r\n\r\n// case 'TASK_ADD':\r\n//     return {...state, list,: [...state.list]}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default kanbanControlPanel;","import { createStore, applyMiddleware} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport kanbanControlPanel from './reducer';\r\n\r\nconst store = createStore(kanbanControlPanel, composeWithDevTools(\r\n    applyMiddleware(),\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}